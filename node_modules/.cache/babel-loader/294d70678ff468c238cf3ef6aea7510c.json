{"ast":null,"code":"var _jsxFileName = \"/Users/hkim/development/Codeacademy/Web-Dev/appointment_planner/src/containers/contactsPage/ContactsPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = ({\n  contacts,\n  addContact\n}) => {\n  _s();\n\n  /*\r\n   Define state variables for \r\n   contact info and duplicate check\r\n   */\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [duplicate, setDuplicate] = useState(false);\n\n  const handleSubmit = e => {\n    /*\r\n      Add contact info and clear data\r\n      if the contact name is not a duplicate\r\n      */\n    e.preventDefault();\n\n    if (duplicate == false) {\n      addContact(name, phone, email);\n      setName(\"\");\n      setPhone(\"\");\n      setEmail(\"\");\n    }\n  };\n  /*\r\n   Using hooks, check for contact name in the \r\n   contacts array variable in props\r\n   */\n\n\n  useEffect(() => {\n    const result = contacts.find(element => {\n      return element.name === name;\n    });\n\n    if (result !== undefined) {\n      setDuplicate(true);\n    }\n  }, [name]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        name: name,\n        setName: setName,\n        phone: phone,\n        setPhone: setPhone,\n        email: email,\n        setEmail: setEmail,\n        handleSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        tiles: contacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 3\n  }, this);\n};\n\n_s(ContactsPage, \"4C5rmMZeyArCmj10lS5pMCSX2H8=\");\n\n_c = ContactsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"sources":["/Users/hkim/development/Codeacademy/Web-Dev/appointment_planner/src/containers/contactsPage/ContactsPage.js"],"names":["React","useState","useEffect","ContactForm","TileList","ContactsPage","contacts","addContact","name","setName","phone","setPhone","email","setEmail","duplicate","setDuplicate","handleSubmit","e","preventDefault","result","find","element","undefined"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,0CAA5B;AACA,SAASC,QAAT,QAAyB,oCAAzB;;AAEA,OAAO,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA8B;AAAA;;AACzD;AACD;AACA;AACA;AAEC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMe,YAAY,GAAIC,CAAD,IAAO;AAC3B;AACF;AACA;AACA;AACEA,IAAAA,CAAC,CAACC,cAAF;;AAEA,QAAIJ,SAAS,IAAI,KAAjB,EAAwB;AACvBP,MAAAA,UAAU,CAACC,IAAD,EAAOE,KAAP,EAAcE,KAAd,CAAV;AACAH,MAAAA,OAAO,CAAC,EAAD,CAAP;AACAE,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACA;AACD,GAbD;AAeA;AACD;AACA;AACA;;;AAECX,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMiB,MAAM,GAAGb,QAAQ,CAACc,IAAT,CAAeC,OAAD,IAAa;AACzC,aAAOA,OAAO,CAACb,IAAR,KAAiBA,IAAxB;AACA,KAFc,CAAf;;AAGA,QAAIW,MAAM,KAAKG,SAAf,EAA0B;AACzBP,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA;AACD,GAPQ,EAON,CAACP,IAAD,CAPM,CAAT;AASA,sBACC;AAAA,4BACC;AAAA,8BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAEC,QAAC,WAAD;AACC,QAAA,IAAI,EAAEA,IADP;AAEC,QAAA,OAAO,EAAEC,OAFV;AAGC,QAAA,KAAK,EAAEC,KAHR;AAIC,QAAA,QAAQ,EAAEC,QAJX;AAKC,QAAA,KAAK,EAAEC,KALR;AAMC,QAAA,QAAQ,EAAEC,QANX;AAOC,QAAA,YAAY,EAAEG;AAPf;AAAA;AAAA;AAAA;AAAA,cAFD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAaC;AAAA;AAAA;AAAA;AAAA,YAbD,eAcC;AAAA,8BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAEC,QAAC,QAAD;AAAU,QAAA,KAAK,EAAEV;AAAjB;AAAA;AAAA;AAAA;AAAA,cAFD;AAAA;AAAA;AAAA;AAAA;AAAA,YAdD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAqBA,CA7DM;;GAAMD,Y;;KAAAA,Y","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = ({ contacts, addContact }) => {\r\n\t/*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n\r\n\tconst [name, setName] = useState('');\r\n\tconst [phone, setPhone] = useState(\"\");\r\n\tconst [email, setEmail] = useState(\"\");\r\n\tconst [duplicate, setDuplicate] = useState(false);\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\t/*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n\t\te.preventDefault();\r\n\r\n\t\tif (duplicate == false) {\r\n\t\t\taddContact(name, phone, email);\r\n\t\t\tsetName(\"\");\r\n\t\t\tsetPhone(\"\");\r\n\t\t\tsetEmail(\"\");\r\n\t\t}\r\n\t};\r\n\r\n\t/*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n\r\n\tuseEffect(() => {\r\n\t\tconst result = contacts.find((element) => {\r\n\t\t\treturn element.name === name;\r\n\t\t});\r\n\t\tif (result !== undefined) {\r\n\t\t\tsetDuplicate(true);\r\n\t\t}\r\n\t}, [name]);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<section>\r\n\t\t\t\t<h2>Add Contact</h2>\r\n\t\t\t\t<ContactForm\r\n\t\t\t\t\tname={name}\r\n\t\t\t\t\tsetName={setName}\r\n\t\t\t\t\tphone={phone}\r\n\t\t\t\t\tsetPhone={setPhone}\r\n\t\t\t\t\temail={email}\r\n\t\t\t\t\tsetEmail={setEmail}\r\n\t\t\t\t\thandleSubmit={handleSubmit}\r\n\t\t\t\t/>\r\n\t\t\t</section>\r\n\t\t\t<hr />\r\n\t\t\t<section>\r\n\t\t\t\t<h2>Contacts</h2>\r\n\t\t\t\t<TileList tiles={contacts} />\r\n\t\t\t</section>\r\n\t\t</div>\r\n\t);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}